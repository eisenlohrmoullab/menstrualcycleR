library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, LHtest)
data = calculate_cycletime(data, id, daterated, menses)
print(data)
summary_ovulation(data)
summary_ovulation(data)
sum_ov = summary_ovulation(data)
sum_ov$ovstatus_total
sum_ov$ovstatus_id
?summary_ovulation
?summarise_plot
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, LHtest)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
View(data)
library(dplyr)
set.seed(123) # For reproducibility
# Function to generate consecutive dates with occasional skips
generate_dates <- function(start_date, n_dates) {
dates <- as.Date(start_date) + seq(0, by = 1, length.out = n_dates + 5)
skipped_indices <- sort(sample(2:(n_dates + 4), size = 5, replace = FALSE))
dates <- dates[-skipped_indices]
dates <- head(dates, n_dates) # Ensure exactly n_dates are returned
format(dates, "%m/%d/%Y")
}
# Initialize empty dataframe
data <- data.frame(id = integer(),
menses = integer(),
ovtoday = integer(),
symptom = integer(),
daterated = character(),
stringsAsFactors = FALSE)
# LHtest schedule for specific IDs
lh_dates <- data.frame(
id = c(2, 3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19),
LHtest_date = as.Date(c("2024-02-09", "2024-02-06", "2024-02-06", "2024-02-06",
"2024-02-08", "2024-02-01", "2024-02-06", "2024-01-31",
"2024-02-07", "2024-02-01", "2024-02-01", "2024-02-06", "2024-02-04", "2024-02-01")))
# Generate data for each id
for (id in 1:25) {
n_dates <- sample(18:35, 1)  # Randomly determine the number of rows for this ID
start_date <- "01/01/2024"  # Starting date
daterated <- generate_dates(start_date, n_dates)
daterated <- as.Date(daterated, format = "%m/%d/%Y")
lubridate::year(daterated) <- 2024
# Determine LHtest occurrence
LHtest <- rep(0, n_dates)
if (id %in% lh_dates$id) {
target_date <- lh_dates$LHtest_date[lh_dates$id == id]
target_range <- which(as.Date(daterated, format = "%m/%d/%Y") >= (target_date - 2) &
as.Date(daterated, format = "%m/%d/%Y") <= (target_date + 2))
if (length(target_range) > 0) {
LHtest[sample(target_range, 1)] <- 1
}
}
# Determine menses occurrences
menses <- rep(0, n_dates)
menses[1] <- 1
menses[n_dates] <- 1
# Generate symptom levels
symptom <- sample(1:5, n_dates, replace = TRUE)
symptom[menses == 1] <- sample(3:5, sum(menses == 1), replace = TRUE) # Higher symptoms around menses
# Combine into a dataframe
id_data <- data.frame(id = id, menses = menses, ovtoday = ovtoday, symptom = symptom, daterated = daterated)
data$daterated = as.Date(data$daterated, format = "%m/%d/%Y")
# Append to main dataset
data <- bind_rows(data, id_data)
lubridate::year(data$daterated) <- 2024
}
library(dplyr)
set.seed(123) # For reproducibility
# Function to generate consecutive dates with occasional skips
generate_dates <- function(start_date, n_dates) {
dates <- as.Date(start_date) + seq(0, by = 1, length.out = n_dates + 5)
skipped_indices <- sort(sample(2:(n_dates + 4), size = 5, replace = FALSE))
dates <- dates[-skipped_indices]
dates <- head(dates, n_dates) # Ensure exactly n_dates are returned
format(dates, "%m/%d/%Y")
}
# Initialize empty dataframe
data <- data.frame(id = integer(),
menses = integer(),
ovtoday = integer(),
symptom = integer(),
daterated = character(),
stringsAsFactors = FALSE)
# LHtest schedule for specific IDs
lh_dates <- data.frame(
id = c(2, 3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19),
LHtest_date = as.Date(c("2024-02-09", "2024-02-06", "2024-02-06", "2024-02-06",
"2024-02-08", "2024-02-01", "2024-02-06", "2024-01-31",
"2024-02-07", "2024-02-01", "2024-02-01", "2024-02-06", "2024-02-04", "2024-02-01")))
# Generate data for each id
for (id in 1:25) {
n_dates <- sample(18:35, 1)  # Randomly determine the number of rows for this ID
start_date <- "01/01/2024"  # Starting date
daterated <- generate_dates(start_date, n_dates)
daterated <- as.Date(daterated, format = "%m/%d/%Y")
lubridate::year(daterated) <- 2024
# Determine LHtest occurrence
ovtoday <- rep(0, n_dates)
if (id %in% lh_dates$id) {
target_date <- lh_dates$LHtest_date[lh_dates$id == id]
target_range <- which(as.Date(daterated, format = "%m/%d/%Y") >= (target_date - 2) &
as.Date(daterated, format = "%m/%d/%Y") <= (target_date + 2))
if (length(target_range) > 0) {
LHtest[sample(target_range, 1)] <- 1
}
}
# Determine menses occurrences
menses <- rep(0, n_dates)
menses[1] <- 1
menses[n_dates] <- 1
# Generate symptom levels
symptom <- sample(1:5, n_dates, replace = TRUE)
symptom[menses == 1] <- sample(3:5, sum(menses == 1), replace = TRUE) # Higher symptoms around menses
# Combine into a dataframe
id_data <- data.frame(id = id, menses = menses, ovtoday = ovtoday, symptom = symptom, daterated = daterated)
data$daterated = as.Date(data$daterated, format = "%m/%d/%Y")
# Append to main dataset
data <- bind_rows(data, id_data)
lubridate::year(data$daterated) <- 2024
}
# Ensure correct sorting by id and daterated
data <- data %>%
mutate(daterated = as.Date(daterated, format = "%m/%d/%Y")) %>%
arrange(id, daterated) %>%
mutate(daterated = format(daterated, "%m/%d/%Y"))
# View dataset structure
str(data)
# Output dataset
data
data$daterated <- lubridate::mdy(data$daterated)
View(data)
library(dplyr)
set.seed(123) # For reproducibility
# Function to generate consecutive dates with occasional skips
generate_dates <- function(start_date, n_dates) {
dates <- as.Date(start_date) + seq(0, by = 1, length.out = n_dates + 5)
skipped_indices <- sort(sample(2:(n_dates + 4), size = 5, replace = FALSE))
dates <- dates[-skipped_indices]
dates <- head(dates, n_dates) # Ensure exactly n_dates are returned
format(dates, "%m/%d/%Y")
}
# Initialize empty dataframe
data <- data.frame(id = integer(),
menses = integer(),
ovtoday = integer(),
symptom = integer(),
daterated = character(),
stringsAsFactors = FALSE)
# LHtest schedule for specific IDs
lh_dates <- data.frame(
id = c(2, 3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19),
LHtest_date = as.Date(c("2024-02-09", "2024-02-06", "2024-02-06", "2024-02-06",
"2024-02-08", "2024-02-01", "2024-02-06", "2024-01-31",
"2024-02-07", "2024-02-01", "2024-02-01", "2024-02-06", "2024-02-04", "2024-02-01")))
# Generate data for each id
for (id in 1:25) {
n_dates <- sample(18:35, 1)  # Randomly determine the number of rows for this ID
start_date <- "01/01/2024"  # Starting date
daterated <- generate_dates(start_date, n_dates)
daterated <- as.Date(daterated, format = "%m/%d/%Y")
lubridate::year(daterated) <- 2024
# Determine LHtest occurrence
ovtoday <- rep(0, n_dates)
if (id %in% lh_dates$id) {
target_date <- lh_dates$LHtest_date[lh_dates$id == id]
target_range <- which(as.Date(daterated, format = "%m/%d/%Y") >= (target_date - 2) &
as.Date(daterated, format = "%m/%d/%Y") <= (target_date + 2))
if (length(target_range) > 0) {
ovtoday[sample(target_range, 1)] <- 1
}
}
# Determine menses occurrences
menses <- rep(0, n_dates)
menses[1] <- 1
menses[n_dates] <- 1
# Generate symptom levels
symptom <- sample(1:5, n_dates, replace = TRUE)
symptom[menses == 1] <- sample(3:5, sum(menses == 1), replace = TRUE) # Higher symptoms around menses
# Combine into a dataframe
id_data <- data.frame(id = id, menses = menses, ovtoday = ovtoday, symptom = symptom, daterated = daterated)
data$daterated = as.Date(data$daterated, format = "%m/%d/%Y")
# Append to main dataset
data <- bind_rows(data, id_data)
lubridate::year(data$daterated) <- 2024
}
# Ensure correct sorting by id and daterated
data <- data %>%
mutate(daterated = as.Date(daterated, format = "%m/%d/%Y")) %>%
arrange(id, daterated) %>%
mutate(daterated = format(daterated, "%m/%d/%Y"))
# View dataset structure
str(data)
# Output dataset
data
data$daterated <- lubridate::mdy(data$daterated)
View(data)
saveRDS(data, "/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
save(data, file= "/Users/anishan/Documents/CLEAR Lab Repos/r-package-workspace/data/cycledata.rda")
save(data, file= "/Users/anishan/Documents/CLEAR Lab Repos/menstrualcycleR/data/cycledata.rda")
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses)
data = calculate_cycletime(data, id, daterated, menses)
devtools::load_all()
library(menstrualcycleR)
data = calculate_cycletime(data, id, daterated, menses)
devtools::load_all()
library(menstrualcycleR)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
View(data)
summary_ovulation(data)
data_check <- function(data, symptom_columns) {
# Table grouped by id
result_by_id <- data %>%
group_by(id) %>%
summarise(
across(
all_of(symptom_columns),
list(
nonNA = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute)),
luteal = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute < 0),
follicular = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute >= 0)
),
.names = "{.col}_{.fn}"
),
.groups = "drop"
)
# Overall table (not grouped by id)
overall_summary <- data %>%
summarise(
across(
all_of(symptom_columns),
list(
nonNA = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute)),
luteal = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute < 0),
follicular = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute >= 0)
),
.names = "{.col}_{.fn}"
)
)
# Return a list with both tables
return(list(
by_id = result_by_id,
overall = overall_summary
))
}
data_check(data)
data_check(data, "symptom")
View(data)
library(dplyr)
set.seed(123) # For reproducibility
# Function to generate consecutive dates with occasional skips
generate_dates <- function(start_date, n_dates) {
dates <- as.Date(start_date) + seq(0, by = 1, length.out = n_dates + 5)
skipped_indices <- sort(sample(2:(n_dates + 4), size = 5, replace = FALSE))
dates <- dates[-skipped_indices]
dates <- head(dates, n_dates) # Ensure exactly n_dates are returned
format(dates, "%m/%d/%Y")
}
# Initialize empty dataframe
data <- data.frame(id = integer(),
menses = integer(),
ovtoday = integer(),
symptom = integer(),
daterated = character(),
stringsAsFactors = FALSE)
# LHtest schedule for specific IDs
lh_dates <- data.frame(
id = c(2, 3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19),
LHtest_date = as.Date(c("2024-02-09", "2024-02-06", "2024-02-06", "2024-02-06",
"2024-02-08", "2024-02-01", "2024-02-06", "2024-01-31",
"2024-02-07", "2024-02-01", "2024-02-01", "2024-02-06", "2024-02-04", "2024-02-01")))
# Generate data for each id
for (id in 1:25) {
n_dates <- sample(18:31, 1)  # Randomly determine the number of rows for this ID
start_date <- "01/01/2024"  # Starting date
daterated <- generate_dates(start_date, n_dates)
daterated <- as.Date(daterated, format = "%m/%d/%Y")
lubridate::year(daterated) <- 2024
# Determine LHtest occurrence
ovtoday <- rep(0, n_dates)
if (id %in% lh_dates$id) {
target_date <- lh_dates$LHtest_date[lh_dates$id == id]
target_range <- which(as.Date(daterated, format = "%m/%d/%Y") >= (target_date - 2) &
as.Date(daterated, format = "%m/%d/%Y") <= (target_date + 2))
if (length(target_range) > 0) {
ovtoday[sample(target_range, 1)] <- 1
}
}
# Determine menses occurrences
menses <- rep(0, n_dates)
menses[1] <- 1
menses[n_dates] <- 1
# Generate symptom levels
symptom <- sample(1:5, n_dates, replace = TRUE)
symptom[menses == 1] <- sample(3:5, sum(menses == 1), replace = TRUE) # Higher symptoms around menses
# Combine into a dataframe
id_data <- data.frame(id = id, menses = menses, ovtoday = ovtoday, symptom = symptom, daterated = daterated)
data$daterated = as.Date(data$daterated, format = "%m/%d/%Y")
# Append to main dataset
data <- bind_rows(data, id_data)
lubridate::year(data$daterated) <- 2024
}
# Ensure correct sorting by id and daterated
data <- data %>%
mutate(daterated = as.Date(daterated, format = "%m/%d/%Y")) %>%
arrange(id, daterated) %>%
mutate(daterated = format(daterated, "%m/%d/%Y"))
# View dataset structure
str(data)
# Output dataset
data
data$daterated <- lubridate::mdy(data$daterated)
?calculate_mcyclength
df = calculate_mcyclength(data, menses, daterated, id ovtoday)
df = calculate_mcyclength(data, menses, daterated, id, ovtoday)
View(df)
df = calculate_cycletime(df)
?calculate_cycletime()
df = calculate_cycletime(df, id, daterated, menses)
df = calculate_cycletime(df, id, daterated, menses)
df = calculate_cycletime(df, id, daterated, menses, ovtoday)
View(df)
df %>% select(id, daterated, ovtoday_impute)
df %>% filter(ovtoday_impute==1) %>% select(id, daterated, ovtoday_impute)
library(dplyr)
set.seed(123) # For reproducibility
# Function to generate consecutive dates with occasional skips
generate_dates <- function(start_date, n_dates) {
dates <- as.Date(start_date) + seq(0, by = 1, length.out = n_dates + 5)
skipped_indices <- sort(sample(2:(n_dates + 4), size = 5, replace = FALSE))
dates <- dates[-skipped_indices]
dates <- head(dates, n_dates) # Ensure exactly n_dates are returned
format(dates, "%m/%d/%Y")
}
# Initialize empty dataframe
data <- data.frame(id = integer(),
menses = integer(),
ovtoday = integer(),
symptom = integer(),
daterated = character(),
stringsAsFactors = FALSE)
# LHtest schedule for specific IDs
lh_dates <- data.frame(
id = c(2, 3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19),
LHtest_date = as.Date(c("2024-02-01", "2024-02-02", "2024-02-01", "2024-02-06",
"2024-02-01", "2024-02-08", "2024-02-08", "2024-02-07",
"2024-02-09", "2024-02-07", "2024-02-09", "2024-01-30", "2024-02-05", "2024-02-03")))
# Generate data for each id
for (id in 1:25) {
n_dates <- sample(18:31, 1)  # Randomly determine the number of rows for this ID
start_date <- "01/01/2024"  # Starting date
daterated <- generate_dates(start_date, n_dates)
daterated <- as.Date(daterated, format = "%m/%d/%Y")
lubridate::year(daterated) <- 2024
# Determine LHtest occurrence
ovtoday <- rep(0, n_dates)
if (id %in% lh_dates$id) {
target_date <- lh_dates$LHtest_date[lh_dates$id == id]
target_range <- which(as.Date(daterated, format = "%m/%d/%Y") >= (target_date - 2) &
as.Date(daterated, format = "%m/%d/%Y") <= (target_date + 2))
if (length(target_range) > 0) {
ovtoday[sample(target_range, 1)] <- 1
}
}
# Determine menses occurrences
menses <- rep(0, n_dates)
menses[1] <- 1
menses[n_dates] <- 1
# Generate symptom levels
symptom <- sample(1:5, n_dates, replace = TRUE)
symptom[menses == 1] <- sample(3:5, sum(menses == 1), replace = TRUE) # Higher symptoms around menses
# Combine into a dataframe
id_data <- data.frame(id = id, menses = menses, ovtoday = ovtoday, symptom = symptom, daterated = daterated)
data$daterated = as.Date(data$daterated, format = "%m/%d/%Y")
# Append to main dataset
data <- bind_rows(data, id_data)
lubridate::year(data$daterated) <- 2024
}
# Ensure correct sorting by id and daterated
data <- data %>%
mutate(daterated = as.Date(daterated, format = "%m/%d/%Y")) %>%
arrange(id, daterated) %>%
mutate(daterated = format(daterated, "%m/%d/%Y"))
# View dataset structure
str(data)
# Output dataset
data
data$daterated <- lubridate::mdy(data$daterated)
df = calculate_mcyclength(data, menses, daterated, id, ovtoday)
df = calculate_cycletime(df, id, daterated, menses, ovtoday)
df %>% select(id, daterated, ovtoday, ovtoday_impute)
saveRDS(data, "/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
save(data, file= "/Users/anishan/Documents/CLEAR Lab Repos/r-package-workspace/data/cycledata.rda")
save(data, file= "/Users/anishan/Documents/CLEAR Lab Repos/menstrualcycleR/data/cycledata.rda")
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
print(data)
data %>% filter(id == 1) %>% select(id, daterated, scaled_cycleday_impute)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute)
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
devtools::load_all()
library(menstrualcycleR)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
print(data)
devtools::load_all()
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute)
devtools::load_all()
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
print(data)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute)
devtools::load_all()
library(menstrualcycleR)
?calculate_mcyclength()
?calculate_cycletime()
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute)
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute)
names(data)
devtools::load_all()
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute, perclut_impute)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute, perclut_impute, percentlut_impute)
devtools::load_all()
library(menstrualcycleR)
data(cycledata)
data = calculate_mcyclength(data, menses, daterated, id, ovtoday)
data = calculate_cycletime(data, id, daterated, menses, ovtoday)
data %>% filter(id == 1) %>% select(id, daterated, ovtoday_impute, menses, scaled_cycleday_impute, lutmax_impute, lutlength1_impute, lutdaycount_impute, lutperc_impute, perclut_impute, percentlut_impute)
summary_ovulation(data)
data_check <- function(data, symptom_columns) {
# Table grouped by id
result_by_id <- data %>%
group_by(id) %>%
summarise(
across(
all_of(symptom_columns),
list(
nonNA = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute)),
luteal = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute < 0),
follicular = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute >= 0)
),
.names = "{.col}_{.fn}"
),
.groups = "drop"
)
# Overall table (not grouped by id)
overall_summary <- data %>%
summarise(
across(
all_of(symptom_columns),
list(
nonNA = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute)),
luteal = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute < 0),
follicular = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute >= 0)
),
.names = "{.col}_{.fn}"
)
)
# Return a list with both tables
return(list(
by_id = result_by_id,
overall = overall_summary
))
}
data_check(data, "symptom")
