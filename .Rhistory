),
.groups = "drop"
)
# Overall table (not grouped by id)
overall_summary <- data %>%
summarise(
across(
all_of(symptom_columns),
list(
nonNA = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute)),
luteal = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute < 0),
follicular = ~ sum(!is.na(.) & !is.na(scaled_cycleday_impute) & scaled_cycleday_impute >= 0)
),
.names = "{.col}_{.fn}"
)
)
# Return a list with both tables
return(list(
by_id = result_by_id,
overall = overall_summary
))
}
data_check(data, "symptom")
bad_lines <- readLines("inst/shiny/server.R", encoding = "UTF-8", warn = FALSE)
which(grepl("[^\x00-\x7F]", bad_lines))
# Read in the file as raw bytes
raw_lines <- readBin("inst/shiny/server.R", what = "raw", n = 1e6)
# Remove null bytes
cleaned_raw <- raw_lines[raw_lines != as.raw(0)]
# Write out a clean file
writeBin(cleaned_raw, "inst/shiny/server_clean.R")
file.remove("inst/shiny/server.R")
file.rename("inst/shiny/server_clean.R", "inst/shiny/server.R")
line_230 <- readLines("inst/shiny/server.R", encoding = "UTF-8", warn = FALSE)[230]
# See the characters in the line, including hidden ones
charToRaw(line_230)
launch app
launch_app()
menstrualcycleR::launch_app()
# Set path to your server.R
file_path <- "inst/shiny/server.R"
backup_path <- "inst/shiny/server_backup.R"
# Read the file as raw text
raw_lines <- readLines(file_path, warn = FALSE, encoding = "UTF-8")
# Remove non-ASCII and control characters (e.g., null, etc.)
clean_lines <- iconv(raw_lines, from = "UTF-8", to = "ASCII//TRANSLIT", sub = "")
# Also strip any lingering null characters explicitly
clean_lines <- gsub("\0", "", clean_lines, fixed = TRUE)
# Set path to your server.R
file_path <- "/Users/anishan/Documents/CLEAR Lab Repos/menstrualcycleR/inst/shiny/server.R"
backup_path <- "/Users/anishan/Documents/CLEAR Lab Repos/menstrualcycleR/inst/shiny/server_backup.R"
# Read the file as raw text
raw_lines <- readLines(file_path, warn = FALSE, encoding = "UTF-8")
# Remove non-ASCII and control characters (e.g., null, etc.)
clean_lines <- iconv(raw_lines, from = "UTF-8", to = "ASCII//TRANSLIT", sub = "")
# Also strip any lingering null characters explicitly
clean_lines <- gsub("\0", "", clean_lines, fixed = TRUE)
# Set file paths
file_path <- "/Users/anishan/Documents/CLEAR Lab Repos/menstrualcycleR/inst/shiny/server.R"
backup_path <- "/Users/anishan/Documents/CLEAR Lab Repos/menstrualcycleR/inst/shiny/server_backup.R"
# Read file in binary mode
con <- file(file_path, "rb")
raw_bytes <- readBin(con, what = "raw", n = 1e6)
close(con)
# Remove null bytes (0x00)
cleaned_bytes <- raw_bytes[raw_bytes != as.raw(0x00)]
# Convert to character lines
clean_text <- rawToChar(cleaned_bytes)
clean_lines <- unlist(strsplit(clean_text, "\n", fixed = TRUE))
# Backup original file
writeBin(raw_bytes, backup_path)
# Write cleaned version back to original path
writeLines(clean_lines, file_path)
cat("âœ… Cleaned nulls and saved to:\n", file_path, "\nðŸ”™ Backup saved as:\n", backup_path, "\n")
menstrualcycleR::launch_app()
menstrualcycleR::launch_app()
commit_hash <- "b1921d7"
system(paste("git reset --hard", commit_hash))
commit_hash <- "b1921d7"
system(paste("git reset --hard", commit_hash))
commit_hash <- "b1921d7"
system(paste("git reset --hard", commit_hash))
commit_hash <- "b1921d7"
system(paste("git reset --hard", commit_hash))
commit_hash <- "b1921d7"
system(paste("git revert", commit_hash))
commit_hash <- "b1921d7"
system(paste("git revert --abort"))
commit_hash <- "2ef11bc"
system(paste("git revert", commit_hash))
commit_hash <- "b1921d7"
system(paste("git revert --abort"))
commit_hash <- "40b407d"
system(paste("git revert", commit_hash))
commit_hash <- "b1921d7"
system(paste("git revert --abort"))
commit_hash <- "2b2bdec"
system(paste("git revert", commit_hash))
system(paste("git add inst/shiny/server.R"))
system(paste("git revert --continue"))
# Run in R/RStudio after updating R
update.packages(ask = FALSE, checkBuilt = TRUE)
rsconnect::deployApp("inst/shiny/")
rsconnect::deployApp("inst/shiny")
devtools::load_all()
devtools::document()
rsconnect::deployApp("inst/shiny")
remotes::install_github("lasy/cpass", dependencies = TRUE)
remotes::install_github("lasy/cpass", dependencies = TRUE, force = T)
rsconnect::deployApp("inst/shiny")
renv::init()
renv::install("lasy/cpass")
renv::snapshot()
rsconnect::deployApp("inst/shiny")
devtools::install()
rsconnect::deployApp("inst/shiny")
renv::init()
rsconnect::deployApp("inst/shiny")
rsconnect::deployApp(appDir = "inst/shiny", appName = "shiny")
rsconnect::deployApp("inst/shiny")
devtools::install()
devtools::document()
rsconnect::deployApp(appDir = "inst/shiny")
install.packages("remotes")  # If not already installed
y
packageDescription("menstrualcycleR")$RemoteRepo
packageDescription("menstrualcycleR")$RemoteRepo
remotes::install_github("eisenlohrmoullab/menstrualcycleR")
packageDescription("menstrualcycleR")$RemoteRepo
packageDescription("menstrualcycleR")$RemoteRepo
packageDescription("menstrualcycleR")[c("RemoteRepo", "RemoteUsername")]
find.package("menstrualcycleR")
packageDescription("menstrualcycleR")
shiny::shinyOptions(testing = TRUE)
launch_app()
rsconnect::showLogs(appName = "shiny", streaming = TRUE)
?zoo::rollapply()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
500/60
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
launch_app()
launch_app()
citation("menstrualcycleR")
tools::package_dependencies("miniUI", reverse = TRUE)
search()
rsconnect::deployApp(appDir = "inst/shiny", appName = "shiny")
menstrualcycleR::launch_app()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_vignette("menstrualcycleR-overview")
devtools::document()
devtools::document()
data(cycledata)
cycledata = data
usethis::use_data(cycledata, overwrite = TRUE)
devtools::build_vignettes()
renv::init()
renv::snapshot()  # saves current package state to renv.lock
devtools::build_vignettes()
renv::snapshot()  # saves current package state to renv.lock
renv::snapshot()  # saves current package state to renv.lock
devtools::build_vignettes()
devtools::build_vignettes()
browseVignettes("menstrualcycleR")
devtools::install(build_vignettes = TRUE)
browseVignettes("menstrualcycleR")
browseVignettes("menstrualcycleR")
devtools::document()
devtools::document
devtools::document()
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = FALSE
)
remotes::install_github("eisenlohrmoullab/menstrualcycleR", force = T)
library(menstrualcycleR)
cycle_plot()?
cycle_plot()
citation("zoo")
?cycle_plot_individual()
devtools::document()
devtools::load_all()
renv::status()
renv::restore()  # if needed
Y
devtools::install(local = TRUE, reload = TRUE, quick = TRUE)
devtools::install(reload = TRUE, quick = TRUE)
plot(cycle_df_scaled$symptom)
devtools::document()
cycledata = readRDS("/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
usethis::use_data(cycledata, overwrite = TRUE)
devtools::document()
devtools::install()
usethis::use_data(cycledata, overwrite = TRUE)
devtools::document()
devtools::install()
cycledata = readRDS( "/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
usethis::use_data(cycledata, overwrite = TRUE)
load("data/cycledata.rda")
str(cycledata)
devtools::document()
devtools::install()
cycledata = readRDS( "/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
> usethis::use_data(cycledata, overwrite = TRUE)
cycledata = readRDS( "/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
usethis::use_data(cycledata, overwrite = TRUE)
devtools::install()
devtools::document()
View(cycledata)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = FALSE
)
library(menstrualcycleR)
library(dplyr)
library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = FALSE
)
library(menstrualcycleR)
library(mgcv)
library(gam.hp)
devtools::document()
cycledata = readRDS("/Users/anishan/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/REVIEW_cycleday_modeling/02_analytic_workspace/simulated_dataset_pkg/cyclesim.rds")
usethis::use_data(cycledata, overwrite = TRUE)
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
knitr::kable(
data.frame(
Level = c("Level-1", "Level-1", "Level-2", "Level-2"),
Effect_Type = c("Fixed effect", "Random slope", "Fixed effect", "Random intercept"),
Description = c(
"Average within-person change across the cycle (e.g., sample-wide cycle effect)",
"Individual differences in how the cycle affects the outcome",
"Between-person differences in average symptom levels explained by a trait-like variable (e.g., age, hormone sensitivity group)",
"Stable individual differences in symptom levels not explained by the cycle"
),
Relevance_to_Cycle_Research = c(
"Captures overall dynamic pattern across the cycle",
"Accounts for heterogeneity in cycle response",
"Models how between-person traits influence average symptom level",
"Captures person-specific symptom baselines"
)
),
caption = "Understanding Multilevel Effects in Menstrual Cycle Modeling",
col.names = c("Level", "Effect Type", "Description", "Relevance to Cycle Research")
)
1-.561
# Step 1: Create the data frame
variance_df <- data.frame(
Component = c("Fixed effect of the cycle",
"Random slope of the cycle",
"Within-person residual"),
Term = c("s(scaled_cycleday_impute)",
"s(scaled_cycleday_impute, id)",
"Residual (1 - Deviance Explained)"),
Proportion = c(0.5460, 0.0212, 0.4328)  # Adjusted to ensure it sums to 1
)
# Normalize
variance_df <- variance_df %>%
mutate(Percent = round(Proportion / sum(Proportion) * 100, 1),
Label = paste0(Component, "\n", Percent, "%"))
# Step 2: Display table
kable(variance_df[, c("Component", "Term", "Proportion")],
col.names = c("Component", "Model Term", "Proportion of Total Variance"))
# Step 1: Create the data frame
variance_df <- data.frame(
Component = c("Fixed effect of the cycle",
"Random slope of the cycle",
"Within-person residual"),
Term = c("s(scaled_cycleday_impute)",
"s(scaled_cycleday_impute, id)",
"Residual (1 - Deviance Explained)"),
Proportion = c(0.5460, 0.0212, 0.4328)  # Adjusted to ensure it sums to 1
)
# Normalize
variance_df <- variance_df %>%
mutate(Percent = round(Proportion / sum(Proportion) * 100, 1),
Label = paste0(Component, "\n", Percent, "%"))
# Step 2: Display table
kable::kable(variance_df[, c("Component", "Term", "Proportion")],
col.names = c("Component", "Model Term", "Proportion of Total Variance"))
install.packages("kable")
# Step 1: Create the data frame
variance_df <- data.frame(
Component = c("Fixed effect of the cycle",
"Random slope of the cycle",
"Within-person residual"),
Term = c("s(scaled_cycleday_impute)",
"s(scaled_cycleday_impute, id)",
"Residual (1 - Deviance Explained)"),
Proportion = c(0.5460, 0.0212, 0.4328)  # Adjusted to ensure it sums to 1
)
# Normalize
variance_df <- variance_df %>%
mutate(Percent = round(Proportion / sum(Proportion) * 100, 1),
Label = paste0(Component, "\n", Percent, "%"))
# Step 2: Display table
knitr::kable(variance_df[, c("Component", "Term", "Proportion")],
col.names = c("Component", "Model Term", "Proportion of Total Variance"))
# Step 3: Create pie chart
ggplot(variance_df, aes(x = "", y = Proportion, fill = Label)) +
geom_col(width = 1, color = "white") +
coord_polar("y") +
theme_void() +
labs(title = "Total Within-person Variance") +
theme(legend.title = element_blank())
# Step 1: Create the data frame
variance_df <- data.frame(
Component = c("Fixed effect of the cycle",
"Random slope of the cycle",
"Within-person residual"),
Term = c("s(scaled_cycleday_impute)",
"s(scaled_cycleday_impute, id)",
"Residual (1 - Deviance Explained)"),
Proportion = c(0.5460, 0.0212, 0.4328)  # Adjusted to ensure it sums to 1
)
# Normalize
variance_df <- variance_df %>%
mutate(Percent = round(Proportion / sum(Proportion) * 100, 1),
Label = paste0(Component, "\n", Percent, "%"))
# Step 2: Display table
knitr::kable(variance_df[, c("Component", "Term", "Proportion")],
col.names = c("Component", "Model Term", "Proportion of Total Variance"))
# Step 3: Create pie chart
ggplot2::ggplot(variance_df, aes(x = "", y = Proportion, fill = Label)) +
geom_col(width = 1, color = "white") +
coord_polar("y") +
theme_void() +
labs(title = "Total Within-person Variance") +
theme(legend.title = element_blank())
# Step 1: Create the data frame
variance_df <- data.frame(
Component = c("Fixed effect of the cycle",
"Random slope of the cycle",
"Within-person residual"),
Term = c("s(scaled_cycleday_impute)",
"s(scaled_cycleday_impute, id)",
"Residual (1 - Deviance Explained)"),
Proportion = c(0.5460, 0.0212, 0.4328)  # Adjusted to ensure it sums to 1
)
# Normalize
variance_df <- variance_df %>%
mutate(Percent = round(Proportion / sum(Proportion) * 100, 1),
Label = paste0(Component, "\n", Percent, "%"))
# Step 2: Display table
knitr::kable(variance_df[, c("Component", "Term", "Proportion")],
col.names = c("Component", "Model Term", "Proportion of Total Variance"))
# Step 3: Create pie chart
ggplot2::ggplot(variance_df, ggplot2::aes(x = "", y = Proportion, fill = Label)) +
ggplot2::geom_col(width = 1, color = "white") +
ggplot2::coord_polar("y") +
ggplot2::theme_void() +
ggplot2::labs(title = "Total Within-person Variance") +
ggplot2::theme(legend.title = element_blank())
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
menstrualcycleR::launch_app()
rsconnect::deployApp()
rsconnect::deployApp(appDir = ".", appPrimaryDoc = "app.R")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
rsconnect::deployApp(
appDir = "inst/shiny",
appPrimaryDoc = "app.R",
appName = "menstrualcycleR-app"
)
devtools::load_all()
rsconnect::deployApp(
appDir = "inst/shiny",
appPrimaryDoc = "app.R",
appName = "menstrualcycleR-app"
)
library(menstrualcycleR)
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
renv::snapshot(force = TRUE)
Y
renv::restore()  # Use lockfile to rebuild the environment
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
renv::snapshot(force = TRUE)
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
renv::snapshot(force = TRUE)
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R", appName = "menstrualcycleR-app")
renv::remove("menstrualcycleR")
renv::remove("cpass")
remotes::install_github("eisenlohrmoullab/menstrualcycleR")
remotes::install_github("lasy/cpass")
renv::snapshot(force = TRUE)
# Remove from the project environment
renv::remove("menstrualcycleR")
renv::remove("cpass")
# Reinstall directly from GitHub with full metadata
remotes::install_github("eisenlohrmoullab/menstrualcycleR", upgrade = "never")
remotes::install_github("lasy/cpass", upgrade = "never")
renv::snapshot(force = TRUE)
renv::remove("menstrualcycleR")
remotes::install_github("eisenlohrmoullab/menstrualcycleR", upgrade = "never", force = TRUE)
renv::snapshot(force = TRUE)
renv::remove("menstrualcycleR")
remove.packages("menstrualcycleR")
remotes::install_github("eisenlohrmoullab/menstrualcycleR", force = TRUE)
renv::snapshot(force = TRUE)
renv::remove("menstrualcycleR")
remove.packages("menstrualcycleR")
renv::install("eisenlohrmoullab/menstrualcycleR")
renv::snapshot(force = TRUE)
Y
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
renv::snapshot(force = TRUE)
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
rsconnect::deployApp(
appDir = "inst/shiny",
appPrimaryDoc = "app.R",
appName = "shiny",                      # <- important!
appId = 14328053,                       # <- ensure this matches the ID for https://.../shiny/
account = "menstrualcycledata",
server = "shinyapps.io"
)
rsconnect::deployApp(
appDir = "inst/shiny",
appPrimaryDoc = "app.R",
appName = "shiny",                      # <- important!
appId = 14328053,                       # <- ensure this matches the ID for https://.../shiny/
account = "menstrualcycledata",
server = "shinyapps.io"
)
# Remove any self-referential links
renv::remove("menstrualcycleR")
# Clean snapshot
renv::snapshot(force = TRUE)
# Now deploy, explicitly setting the app
rsconnect::deployApp(
appDir = "inst/shiny",
appPrimaryDoc = "app.R",
appName = "shiny",
appId = 14328053,
account = "menstrualcycledata",
server = "shinyapps.io"
)
# Remove any self-referential links
renv::remove("menstrualcycleR")
# Clean snapshot
renv::snapshot(force = TRUE)
# Now deploy, explicitly setting the app
rsconnect::deployApp(
appDir = "inst/shiny",
appPrimaryDoc = "app.R",
appName = "shiny",
appId = 14328053,
account = "menstrualcycledata",
server = "shinyapps.io"
)
renv::snapshot(force = TRUE)
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
# In your Shiny app project root (inst/shiny), run:
renv::remove("menstrualcycleR")
renv::install("eisenlohrmoullab/menstrualcycleR")
rsconnect::deployApp(appDir = "inst/shiny", appPrimaryDoc = "app.R")
devtools::build_vignettes()
devtools::document()
devtools::install(build_vignettes = TRUE)
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE, force = TRUE)
vignette(package = "menstrualcycleR")
system.file("doc", package = "menstrualcycleR")
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
